pipeline {
	agent any 
	tools {
        maven 'Maven'
        jdk 'jdk'
    }
    environment {
    	
    	// Docker ENV vars
    	USER_CREDENTIALS = credentials('Docker-credentials')
    	NEXUS_CREDENTIAL_ID = "Nexus-credentials-jenkins"
    	TAG = "0.0.${BUILD_NUMBER}"
    	
           }
	stages{
		stage("Build"){
			steps{
				// With tests passed build and package the app
				sh 'mvn -f sample-maven-web-app/pom.xml clean install'
			}
		}	
		stage("Containerize"){
			steps{
				script {				
					// We also build the Docker image. I used my docker account and tagged the image based on the pipeline build number.
                    			dockerImage = docker.build("${USER_CREDENTIALS_USR}/sample-maven-web-app:${TAG}", "-f sample-maven-web-app/Dockerfile .")
                    			dockerImageLatest = docker.build("${USER_CREDENTIALS_USR}/sample-maven-web-app:latest", "-f sample-maven-web-app/Dockerfile .")
        	       	}
			}
		}
		stage("Deploy Artifact"){
			steps{
				//We changed the pom.xml file accordingly to deploy tou our private Nexus artifactory
				withMaven(globalMavenSettingsConfig: 'sample-maven-web-app') {
				sh 'mvn -f sample-maven-web-app/pom.xml clean deploy'
				}
			}
		}
		stage("Deploy Docker Image") {
     		steps{
        		script {
        			// Pushing the image to our local docker repository inside Nexus
            		docker.withRegistry( 'http://172.19.0.4:8082', NEXUS_CREDENTIAL_ID ) {
            		dockerImage.push()
            		dockerImageLatest.push()
    	        			}
      				}     
        		}
		}
		stage("Deploy to Kubernetes") {
			agent {
			kubernetes{
				yaml '''
                                apiVersion: v1
                                kind: Pod
                                metadata:
                                  app: web-app
                                spec:
                                  containers:
                                  - name: web-app
                                    image: 192.168.49.4:8082/jmmisd/sample-maven-web-app:latest
                                    ports:
                                    - containerPort: 8080
                                    command:
                                    - sleep
                                    args:
                                    - 99d
                                 '''
				}
			}
			steps{
				sh 'pwd'
			}
		}
	}
}
