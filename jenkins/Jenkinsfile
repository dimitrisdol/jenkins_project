pipeline {
	 agent {
        kubernetes {
            label "jenkins-slave"
            cloud "kubernetes"
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
              namespace: default
              labels:
                jenkins: slave
            spec:
              containers:
              - name: jnlp-slave
              image: jenkinsci/jnlp-slave
              tty: true
              command: ['cat']
              - name: maven
              image: maven:3.8.7-openjdk-18-slim
              tty: true
              command:
              - sleep
              args:
              - 99d
              - name: docker
              image: docker:dind
              tty: true
              command:
              - sleep
              args:
              - 99d
            '''
        }
    }
  	tools {
        maven 'Maven'
        jdk 'jdk'
    }
    environment {
    	
    	// Docker ENV vars
    	USER_CREDENTIALS = credentials('Docker-credentials')
    	NEXUS_CREDENTIAL_ID = "Nexus-credentials-jenkins"
    	NEXUS_DOCKER_REGISTRY = "http://172.19.0.4:8082"
    	TAG = "0.0.${BUILD_NUMBER}"

    	//Kubernetes ENV vars
    	KUBE_CONFIG = "config"
        KUBE_CREDENTIALS = "kube-cert"
        KUBE_API_SERVER = "http://192.168.49.2:8443"
        CLUSTER_NAME = "minikube"
        NAMESPACE = "default"

        }
	stages{
		stage("Build"){
			steps{
				container("maven") {
				// With tests passed build and package the app
				sh 'mvn -f sample-maven-web-app/pom.xml clean install'
				}
			}
		}	
		stage("Containerize"){
			  steps{
			  	container("docker") {
				  script {				
					  // We also build the Docker image. I used my docker account and tagged the image based on the pipeline build number.
                    			dockerImage = docker.build("${USER_CREDENTIALS_USR}/sample-maven-web-app:${TAG}", "-f sample-maven-web-app/Dockerfile .")
                    			dockerImageLatest = docker.build("${USER_CREDENTIALS_USR}/sample-maven-web-app:latest", "-f sample-maven-web-app/Dockerfile .")
        	       		}
        	      }
			}
		}
		stage("Deploy Artifact"){
			steps{
				container("maven") {
				  //We changed the pom.xml file accordingly to deploy tou our private Nexus artifactory
				  withMaven(globalMavenSettingsConfig: 'sample-maven-web-app') {
				  sh 'mvn -f sample-maven-web-app/pom.xml clean deploy'
				  }
			  }
			}
		}
		stage("Deploy Docker Image") {
     			steps{
     				container("docker") {
        			script {
        				// Pushing the image to our local docker repository inside Nexus
            				docker.withRegistry( NEXUS_DOCKER_REGISTRY , NEXUS_CREDENTIAL_ID ) {
            					dockerImage.push()
            					dockerImageLatest.push()
    	        			}
    	        	  }
      				}     
        		}
		}
		stage("Deploy to Kubernetes") {
			agent { label 'main' }
			steps{
				withKubeConfig([credentialsId: KUBE_CONFIG,
						caCertificate: KUBE_CREDENTIALS,
                    				serverUrl: KUBE_API_SERVER,
                    				clusterName: CLUSTER_NAME,
                    				namespace: NAMESPACE
                   				]) {
					// Firstly lets curl the kubectl tool as it is was not available inside the jenkins container
					sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
        				sh 'chmod u+x ./kubectl'
        				// Check to see if any pods are available and apply the new deployment changes and service
					sh '''
					./kubectl get pods
					./kubectl apply -f sample-maven-web-app/kube/deployment.yaml
					chmod +x sample-maven-web-app/kube/deploy.sh
					cd sample-maven-web-app/kube/
					./deploy.sh
					'''
				}
			}
		}
	}
}
